)
#> `summarise()` ungrouping output (override with `.groups` argument)
ggplot(data = delays, mapping = aes(x = delay)) +
geom_freqpoly(binwidth = 10)
delays <- not_cancelled %>%
group_by(tailnum) %>%
summarise(
delay = mean(arr_delay)
)
#> `summarise()` ungrouping output (override with `.groups` argument)
ggplot(data = delays, mapping = aes(x = delay)) +
geom_freqpoly(binwidth = 10)
delays
not_cancelled
delays
summarise(
delay = mean(arr_delay)
)
delays <- not_cancelled %>%
group_by(tailnum) %>%
summarise(
delay = mean(arr_delay)
)
delays
delays
delays <- not_cancelled %>%
group_by(tailnum) %>%
summarise(
delay = mean(arr_delay, na.rm = TRUE),
n = n()
)
delays
delays <- not_cancelled %>%
group_by(tailnum) %>%
summarise(
delay = mean(arr_delay, na.rm = TRUE),
n = n()
)
summarise(
delay = mean(arr_delay, na.rm = TRUE),
n = n()
)
delays <- not_cancelled %>%
group_by(tailnum) %>%
summarise(
delay = mean(arr_delay, na.rm = TRUE),
n = n()
)
delays
delays
delays <- not_cancelled %>%
group_by(tailnum) %>%
summarise(
delay = mean(arr_delay)
)
delays
summarise(mean = mean(dep_delay))
not_cancelled %>%
group_by(year, month, day) %>%
summarise(mean = mean(dep_delay))
not_cancelled %>%
group_by(year, month, day) %>%
summarise(mean = mean(dep_delay))
delays <- not_cancelled %>%
group_by(tailnum) %>%
summarise(
delay = mean(arr_delay, na.rm = TRUE),
n = n()
)
not_cancelled %>%
group_by(year, month, day) %>%
summarise(mean = mean(dep_delay))
not_cancelled
not_cancelled <- flights %>%
filter(!is.na(dep_delay), !is.na(arr_delay))
not_cancelled <- flights %>%
filter(!is.na(dep_delay), !is.na(arr_delay))
not_cancelled %>%
group_by(year, month, day) %>%
summarise(mean = mean(dep_delay))
delays <- not_cancelled %>%
group_by(tailnum) %>%
summarise(
delay = mean(arr_delay)
)
delays
delays <- not_cancelled %>%
group_by(tailnum) %>%
summarise(
delay = mean(arr_delay, na.rm = TRUE),
n = n()
)
delays
not_cancelled %>%
group_by(year, month, day) %>%
summarise(mean = mean(dep_delay))
summarise(mean = mean(dep_delay))
flights %>%
group_by(year, month, day) %>%
summarise(mean = mean(dep_delay))
delays
cf_plot
# Knitr setup
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir= normalizePath('..'))
# Load project
library("ProjectTemplate")
load.project()
# Run code in analysis.R script
source("src/analysis.R")
X_raw = BreastCancer[,2:10]
library(mlbench)
X_raw = BreastCancer[,2:10]
head(BreastCancer)
data(BreastCancer)
X_raw = BreastCancer[,2:10]
class(X_raw)
X_raw = as.matrix(X_raw)
class(X_raw)
X_raw = as.matrix(X_raw)
class(X_raw)
class(X_raw)
X = scale(X_raw)
X = scale(X_raw)
X_raw
View(X_raw)
View(X)
View(x)
View(X_raw)
View(X_raw)
X = scale(X_raw)
class(X_raw)
prostate
prostate[,1:8]
View(prostate)
View(prostate)
X = scale(X_raw)
class(X_raw)
source("~/.active-rstudio-document")
head(X, 5)
View(X_raw)
View(X)
source("C:/Users/noah/Desktop/R final/r final.R")
head(X, 5)
class(X_raw)
head(X, 5)
View(X)
head(X, 5)
source("C:/Users/noah/Desktop/data managemant/Example/munge/01-A.R")
source("C:/Users/noah/Desktop/data managemant/Example/munge/01-A.R")
load.project()
library("ProjectTemplate")
load.project()
source("C:/Users/noah/Desktop/data managemant/Example/munge/01-A.R")
source("C:/Users/noah/Desktop/data managemant/Example/munge/01-A.R")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir= normalizePath('..'))
# Insert Asia plot
AS_view+
ggtitle("Video duration and views percentage in Asia")
source("C:/Users/noah/Desktop/R final/r final.R")
View(MyWeekly)
library ( MASS )
library ( MASS )
train_set = sample(c(TRUE, FALSE), nrow(Weekly_data), replace=TRUE)
library(MASS)
lda(class~., data=banknotes[train_set,])
lda(class~., data=Weekly_data[train_set,])
lda(class~., data=Weekly_data[train_set,])
as.matrix(Weekly_data)
lda(class~., data=Weekly_data[train_set,])
class(train_set)
class(Weekly_data)
lda(class~., data=Weekly_data[train_set,])
lda(class~., data=Weekly_data[train_set,])
Weekly_data[train_set,]
Weekly_data[train_set,]=as.matrix(Weekly_data[train_set,])
lda(class~., data=Weekly_data[train_set,])
Weekly_data=as.matrix(Weekly_data)
lda(class~., data=Weekly_data[train_set,])
data(banknotes)
lda(class~., data=Weekly_data[train_set,])
lda(class~., data=Weekly_data[train_set,])
Weekly_data[train_set,]=as.data.frame(Weekly_data[train_set,])
lda(class~., data=Weekly_data[train_set,])
train_set = sample(c(TRUE, FALSE), nrow(Weekly_data), replace=TRUE)
source("C:/Users/noah/Desktop/R final/r final.R")
data(banknotes)
data(banknotes)
data(banknotes)
data(banknotes)
library(nclSLR)
data(banknotes)
head(banknotes)
class(banknotes)
class(Weekly_data)
## Sample indices of training data:
train_set = sample(c(TRUE, FALSE), nrow(banknotes), replace=TRUE)
class(train_set)
library(MASS)
lda(class~., data=banknotes[train_set,])
class(banknotes[train_set,])
class(Weekly_data)
lda(class~., data=banknotes[train_set,])
train_set = sample(c(TRUE, FALSE), nrow(Weekly_data), replace=TRUE)
lda(class~., data=Weekly_data[train_set,])
class(Weekly_data)
class(banknotes)
lda(y~., data=Weekly_data[train_set,])
lda(y~., data=Weekly_data[train_set,])
(lda_train = lda(y~., data=Weekly_data[train_set,], prior=c(0.98, 0.02)))
## Compute fitted values for the validation data:
lda_test = predict(lda_train, Weekly_data[!train_set,])
names(lda_test)
yhat_test = lda_test$class
head(yhat_test)
1 - mean(banknotes$class[!train_set] == yhat_test)
1 - mean(Weekly_data$class[!train_set] == yhat_test)
1 - mean(Weekly_data$y[!train_set] == yhat_test)
1 - mean(Weekly_data$y[!train_set] == yhat_test)
(qda_train = qda(class~., data=Weekly_data[train_set,], prior=c(0.98, 0.02)))
(qda_train = qda(y~., data=Weekly_data[train_set,], prior=c(0.98, 0.02)))
qda_test = predict(qda_train, banknotes[!train_set,])
1 - mean(Weekly_data$y[!train_set] == yhat_test)
1 - mean(Weekly_data$y[!train_set] == yhat_test)
1 - mean(Weekly_data$y[!train_set] == yhat_test)
Weekly_data[!train_set,]
names(lda_test)
yhat_test = lda_test$y
1 - mean(Weekly_data$y[!train_set] == yhat_test)
yhat_test = lda_test$class
head(yhat_test)
1 - mean(Weekly_data$y[!train_set] == yhat_test)
## Compute fitted values for the validation data:
qda_test = predict(qda_train, banknotes[!train_set,])
1 - mean(Weekly_data$y[!train_set] == yhat_test)
qda_test = predict(qda_train, banknotes[!train_set,])
qda_test = predict(qda_train, Weekly_data[!train_set,])
yhat_test = qda_test$class
1 - mean(Weekly_data$y[!train_set] == yhat_test)
1 - mean(Weekly_data$y[!train_set] == yhat_test)
qda_test = predict(qda_train, Weekly_data[!train_set,])
yhat_test = qda_test$class
## Compute test error:
1 - mean(Weekly_data$y[!train_set] == yhat_test)
qda_test = predict(qda_train, Weekly_data[!train_set,])
yhat_test = qda_test$class
## Compute test error:
1 - mean(Weekly_data$y[!train_set] == yhat_test)
lda_test = predict(lda_train, Weekly_data[!train_set,])
names(lda_test)
yhat_test = lda_test$class
head(yhat_test)
1 - mean(Weekly_data$y[!train_set] == yhat_test)
qda_test = predict(qda_train, Weekly_data[!train_set,])
yhat_test = qda_test$class
## Compute test error:
1 - mean(Weekly_data$y[!train_set] == yhat_test)
qda_test = predict(qda_train, Weekly_data[!train_set,])
yhat_test = qda_test$class
## Compute test error:
1 - mean(Weekly_data$y[!train_set] == yhat_test)
summary(logreg1_fit)
View(Weekly_data_red)
train_set = sample(c(TRUE, FALSE), nrow(Weekly_data_red), replace=TRUE)
lda(y~., data=Weekly_data_red[train_set,])
(lda_train = lda(y~., data=Weekly_data_red[train_set,], prior=c(0.98, 0.02)))
lda_test = predict(lda_train, Weekly_data_red[!train_set,])
names(lda_test)
1 - mean(Weekly_data_red$y[!train_set] == yhat_test)
1 - mean(Weekly_data_red$y[!train_set] == yhat_test)
lda_test = predict(lda_train, Weekly_data_red[!train_set,])
names(lda_test)
yhat_test = lda_test$class
head(yhat_test)
1 - mean(Weekly_data_red$y[!train_set] == yhat_test)
(qda_train = qda(y~., data=Weekly_data_red[train_set,], prior=c(0.98, 0.02)))
## Compute fitted values for the validation data:
qda_test = predict(qda_train, Weekly_data[!train_set,])
yhat_test = qda_test$class
## Compute test error:
1 - mean(Weekly_data$y[!train_set] == yhat_test)
1 - mean(Weekly_data$y[!train_set] == yhat_test)
1 - mean(Weekly_data_red$y[!train_set] == yhat_test)
qda_test = predict(qda_train, Weekly_data_red[!train_set,])
yhat_test = qda_test$class
## Compute test error:
1 - mean(Weekly_data$y[!train_set] == yhat_test)
qda_test = predict(qda_train, Weekly_data_red[!train_set,])
yhat_test = qda_test$class
## Compute test error:
1 - mean(Weekly_data_red$y[!train_set] == yhat_test)
yhat_test = lda_test$class
head(yhat_test)
1 - mean(Weekly_data_red$y[!train_set] == yhat_test)
1 - mean(Weekly_data_red$y[!train_set] == yhat_test)
1 - mean(Weekly_data_red$y[!train_set] == yhat_test)
yhat_test = lda_test$class
head(yhat_test)
1 - mean(Weekly_data_red$y[!train_set] == yhat_test)
yhat_test = lda_test$class
1 - mean(Weekly_data_red$y[!train_set] == yhat_test)
1 - mean(Weekly_data_red$y[!train_set] == yhat_test)
yhat_test = qda_test$class
## Compute test error:
1 - mean(Weekly_data_red$y[!train_set] == yhat_test)
lda(y~., data=Weekly_data_red[train_set,])
(lda_train = lda(y~., data=Weekly_data_red[train_set,], prior=c(0.98, 0.02)))
yhat_test = lda_test$class
head(yhat_test)
1 - mean(Weekly_data_red$y[!train_set] == yhat_test)
## Compute fitted values for the validation data:
lda_test = predict(lda_train, Weekly_data_red[!train_set,])
names(lda_test)
## Compute fitted values for the validation data:
lda_test = predict(lda_train, Weekly_data_red[!train_set,])
names(lda_test)
lda_test = predict(lda_train, Weekly_data_red[!train_set,])
names(lda_test)
lda_test = predict(lda_train, Weekly_data_red[!train_set,])
names(lda_test)
yhat_test = lda_test$class
head(yhat_test)
(qda_train = qda(y~., data=Weekly_data_red[train_set,], prior=c(0.98, 0.02)))
## Compute fitted values for the validation data:
qda_test = predict(qda_train, Weekly_data_red[!train_set,])
yhat_test = qda_test$class
## Compute test error:
1 - mean(Weekly_data_red$y[!train_set] == yhat_test)
## Compute fitted values for the validation data:
qda_test = predict(qda_train, Weekly_data_red[!train_set,])
yhat_test = qda_test$class
## Compute test error:
1 - mean(Weekly_data_red$y[!train_set] == yhat_test)
## Perform QDA on the training data:
(qda_train = qda(y~., data=Weekly_data_red[train_set,], prior=c(0.98, 0.02)))
## Compute fitted values for the validation data:
qda_test = predict(qda_train, Weekly_data_red[!train_set,])
yhat_test = qda_test$class
## Compute test error:
1 - mean(Weekly_data_red$y[!train_set] == yhat_test)
## Perform QDA on the training data:
(qda_train = qda(y~., data=Weekly_data_red[train_set,], prior=c(0.98, 0.02)))
## Compute fitted values for the validation data:
qda_test = predict(qda_train, Weekly_data_red[!train_set,])
yhat_test = qda_test$class
## Compute test error:
1 - mean(Weekly_data_red$y[!train_set] == yhat_test)
(best_BIC = bss_fit_BIC$ModelReport$Bestk)
library("ProjectTemplate")
load.project()
load.project()
load.project()
View(by_day)
View(bss_fit_BIC)
View(bss_fit_AIC)
View(BreastCancer)
View(BreastCancer)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir= normalizePath('..'))
library(ProjectTemplate)
load.project()
# Run code in analysis.R script
source("src/analysis.R")
gpu[1:1000,]%>%
ggplot(aes(x =gpuSerial, y = powerDrawWatt)) +
geom_point()
colnames(gpu)
gpu[1:1000,]%>%
ggplot(aes(x =gpuSerial, y = gpuUtilPerc)) +
geom_point()
gpu[1:1000,]%>%
ggplot(aes(x =gpuSerial, y = powerDrawWatt)) +
geom_point()
gpu[1:1000,]%>%
ggplot(aes(x =powerDrawWatt, y = gpuSerial) +
geom_point()
gpu[1:1000,]%>%
gpu[1:1000,]%>%
ggplot(aes(x =gpuSerial, y = powerDrawWatt)) +
geom_point()
bar_GB3<-df1 %>%
ggplot(aes(x = gp
bar_GB3<-df1 %>%
bar_GB3
gpu[1:1000,]%>%
ggplot(aes(x =gpuSerial, y = powerDrawWatt)) +
geom_point()
gpu[1:1000,]%>%
ggplot(aes(x =powerDrawWatt, y = gpuSerial)) +
geom_point()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir= normalizePath('..'))
library(ProjectTemplate)
load.project()
# Run code in analysis.R script
source("src/analysis.R")
gpu[1:1000,] %>%
ggplot(aes(x = gpuSerial, y = powerDrawWatt)) +
geom_point()
bar_GB3<-df1 %>%
ggplot(aes(x = gpuMemUtilPerc, color = taskId)) +
geom_freqpoly()
bar_GB3
# Insert US plot
bar_GB3
# Insert US plot
bar_GB3
# Insert US plot
bar_GB4
# Insert US plot
bar_GB5
View(gpu)
colnames(gpu)
gpu[1:1000,] %>%
ggplot(aes(x = gpuSerial, y = gpuTempC)) +
geom_point()
View(application.checkpoints)
View(gpu)
pairs(gpu[1:1000,3:8], main = "Scatterplot Matrix")
pairs(gpu[1:1000,3,5:8],main = "Scatterplot Matrix")
gpu[1:1000,] %>%
ggplot(aes(x = gpuSerial, y = gpuMemUtilPerc,)) +
geom_point()
library("ProjectTemplate")
load.project()
setwd("C:/Users/noah/Desktop/cloud computing/Example")
gpu[1:1000,] %>%
ggplot(aes(x = powerDrawWatt, y = gpuTempC)) +
geom_point()
load.project()
gpu[1:1000,] %>%
ggplot(aes(x = powerDrawWatt, y = gpuTempC)) +
geom_point()
colnames(gpu)
gpu[1:1000,] %>%
ggplot(aes(x = gpuSerial, y = powerDrawWatt)) +
geom_point()
gpu[1:1000,] %>%
ggplot(aes(x = gpuSerial, y = gpuTempC)) +
geom_point()
gpu[1:1000,] %>%
ggplot(aes(x = gpuSerial, y = powerDrawWatt)) +
geom_point()
gpu[1:1000,] %>%
ggplot(aes(x = gpuSerial, y = gpuTempC)) +
geom_point()
gpu[1:5000,] %>%
ggplot(aes(x = gpuSerial, y = gpuTempC)) +
geom_point()
gpu[1:1000,] %>%
ggplot(aes(x = gpuSerial, y = gpuUtilPerc)) +
geom_point()
gpu[1:1000,] %>%
ggplot(aes(x = gpuSerial, y = gpuMemUtilPerc)) +
geom_point()
pairs(gpu[1:1000,select(where(is.numeric))], main = "Scatterplot Matrix")
df4<-gpu[1:1000,] %>% select(where(is.numeric))
View(df4)
pairs(df4, main = "Scatterplot Matrix")
gpu[1:1000,] %>%
ggplot(aes(x = gpuSerial, y = powerDrawWatt)) +
geom_point()
rm(df4)
gpu[1:1000,] %>%
ggplot(aes(x = gpuSerial, y = powerDrawWatt)) +
geom_point()
gpu[1:1000,] %>%
ggplot(aes(x = gpuSerial, y = gpuUtilPerc)) +
geom_point()
colnames(gpu)
gpu[1:1000,] %>%
ggplot(aes(x = gpuSerial, y = gpuTempC)) +
geom_point()
gpu[1:1000,] %>%
ggplot(aes(x = gpuSerial, y = powerDrawWatt)) +
geom_point()
gpu[1:1000,] %>%
ggplot(aes(x = gpuSerial, y = gpuMemUtilPerc)) +
geom_point()
gpu[1:1000,] %>%
ggplot(aes(x = gpuSerial, y = gpuUtilPerc)) +
geom_point()
bar_GB10<-gpu[1:1000,] %>%
ggplot(aes(x = gpuSerial, y = powerDrawWatt)) +
geom_point()
bar_GB11<-gpu[1:1000,] %>%
ggplot(aes(x = gpuSerial, y = gpuMemUtilPerc)) +
geom_point()
gbar_GB12<-pu[1:1000,] %>%
ggplot(aes(x = gpuSerial, y = gpuUtilPerc)) +
geom_point()
bar_GB10<-gpu[1:1000,] %>%
ggplot(aes(x = gpuSerial, y = powerDrawWatt)) +
geom_point()
bar_GB11<-gpu[1:1000,] %>%
ggplot(aes(x = gpuSerial, y = gpuMemUtilPerc)) +
geom_point()
gbar_GB12<-gpu[1:1000,] %>%
ggplot(aes(x = gpuSerial, y = gpuUtilPerc)) +
geom_point()
bar_GB12<-gpu[1:1000,] %>%
ggplot(aes(x = gpuSerial, y = gpuUtilPerc)) +
geom_point()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir= normalizePath('..'))
# Insert US plot
bar_GB10
# Insert US plot
bar_GB11
# Insert US plot
bar_GB12
